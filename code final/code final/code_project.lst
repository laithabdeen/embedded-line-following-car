;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/5/2023 10:35:20 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28CE      	GOTO       206
_reciever:
;code_project.c,130 :: 		unsigned char reciever(){
;code_project.c,132 :: 		while(!RCIF);
L_reciever25:
;code_project.c,134 :: 		PIR1= PIR1 & 0xDF; //RCIF_bit=0;
0x0003	0x30DF      	MOVLW      223
0x0004	0x1283      	BCF        STATUS, 5
0x0005	0x1303      	BCF        STATUS, 6
0x0006	0x058C      	ANDWF      PIR1, 1
;code_project.c,136 :: 		return RCREG;
0x0007	0x081A      	MOVF       RCREG, 0
0x0008	0x00F0      	MOVWF      R0
;code_project.c,138 :: 		}
L_end_reciever:
0x0009	0x0008      	RETURN
; end of _reciever
_turn_left:
;code_project.c,36 :: 		void turn_left() {
;code_project.c,37 :: 		PORTD = 0x06;  // Turn left command
0x000A	0x3006      	MOVLW      6
0x000B	0x1283      	BCF        STATUS, 5
0x000C	0x1303      	BCF        STATUS, 6
0x000D	0x0088      	MOVWF      PORTD
;code_project.c,38 :: 		}
L_end_turn_left:
0x000E	0x0008      	RETURN
; end of _turn_left
_serial_interface:
;code_project.c,103 :: 		void serial_interface(){
;code_project.c,105 :: 		TXSTA = 0x20; //Asynchronous mode, Low power BRGH=0, 8-bit selection
0x000F	0x3020      	MOVLW      32
0x0010	0x1683      	BSF        STATUS, 5
0x0011	0x1303      	BCF        STATUS, 6
0x0012	0x0098      	MOVWF      TXSTA
;code_project.c,107 :: 		RCSTA = 0x90; // Serial port enable, continous recieve enabled, 8-bit selection
0x0013	0x3090      	MOVLW      144
0x0014	0x1283      	BCF        STATUS, 5
0x0015	0x0098      	MOVWF      RCSTA
;code_project.c,109 :: 		SPBRG= 12; //Low power,, 9600 baudrate
0x0016	0x300C      	MOVLW      12
0x0017	0x1683      	BSF        STATUS, 5
0x0018	0x0099      	MOVWF      SPBRG
;code_project.c,112 :: 		PIR1= PIR1 & 0xEF; //TXIF_bit=0;
0x0019	0x30EF      	MOVLW      239
0x001A	0x1283      	BCF        STATUS, 5
0x001B	0x058C      	ANDWF      PIR1, 1
;code_project.c,113 :: 		PIR1= PIR1 & 0xDF; //RCIF_bit=0;
0x001C	0x30DF      	MOVLW      223
0x001D	0x058C      	ANDWF      PIR1, 1
;code_project.c,114 :: 		}
L_end_serial_interface:
0x001E	0x0008      	RETURN
; end of _serial_interface
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x001F	0x1283      	BCF        STATUS, 5
0x0020	0x1303      	BCF        STATUS, 6
0x0021	0x0824      	MOVF       ___DoICPAddr+1, 0
0x0022	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0023	0x0823      	MOVF       ___DoICPAddr, 0
0x0024	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0025	0x0008      	RETURN
; end of _____DoICP
_my_delay:
;code_project.c,44 :: 		void my_delay(unsigned int mscnt) {
;code_project.c,47 :: 		for (ms = 0; ms < mscnt; ms++) {
0x0026	0x1283      	BCF        STATUS, 5
0x0027	0x1303      	BCF        STATUS, 6
0x0028	0x01F1      	CLRF       R1
0x0029	0x01F2      	CLRF       R1+1
L_my_delay2:
0x002A	0x0828      	MOVF       FARG_my_delay_mscnt+1, 0
0x002B	0x0272      	SUBWF      R1+1, 0
0x002C	0x1D03      	BTFSS      STATUS, 2
0x002D	0x2830      	GOTO       L__my_delay33
0x002E	0x0827      	MOVF       FARG_my_delay_mscnt, 0
0x002F	0x0271      	SUBWF      R1, 0
L__my_delay33:
0x0030	0x1803      	BTFSC      STATUS, 0
0x0031	0x2844      	GOTO       L_my_delay3
;code_project.c,48 :: 		for (cnt = 0; cnt < 155; cnt++)
0x0032	0x01F3      	CLRF       R3
0x0033	0x01F4      	CLRF       R3+1
L_my_delay5:
0x0034	0x3000      	MOVLW      0
0x0035	0x0274      	SUBWF      R3+1, 0
0x0036	0x1D03      	BTFSS      STATUS, 2
0x0037	0x283A      	GOTO       L__my_delay34
0x0038	0x309B      	MOVLW      155
0x0039	0x0273      	SUBWF      R3, 0
L__my_delay34:
0x003A	0x1803      	BTFSC      STATUS, 0
0x003B	0x2840      	GOTO       L_my_delay6
0x003C	0x0AF3      	INCF       R3, 1
0x003D	0x1903      	BTFSC      STATUS, 2
0x003E	0x0AF4      	INCF       R3+1, 1
;code_project.c,49 :: 		;
0x003F	0x2834      	GOTO       L_my_delay5
L_my_delay6:
;code_project.c,47 :: 		for (ms = 0; ms < mscnt; ms++) {
0x0040	0x0AF1      	INCF       R1, 1
0x0041	0x1903      	BTFSC      STATUS, 2
0x0042	0x0AF2      	INCF       R1+1, 1
;code_project.c,50 :: 		}
0x0043	0x282A      	GOTO       L_my_delay2
L_my_delay3:
;code_project.c,51 :: 		}
L_end_my_delay:
0x0044	0x0008      	RETURN
; end of _my_delay
_stop:
;code_project.c,40 :: 		void stop() {
;code_project.c,41 :: 		PORTD = 0x00;  // Stop command
0x0045	0x1283      	BCF        STATUS, 5
0x0046	0x1303      	BCF        STATUS, 6
0x0047	0x0188      	CLRF       PORTD
;code_project.c,42 :: 		}
L_end_stop:
0x0048	0x0008      	RETURN
; end of _stop
_move_forward:
;code_project.c,28 :: 		void move_forward() {
;code_project.c,29 :: 		PORTD = 0x05;  // Move forward command
0x0049	0x3005      	MOVLW      5
0x004A	0x1283      	BCF        STATUS, 5
0x004B	0x1303      	BCF        STATUS, 6
0x004C	0x0088      	MOVWF      PORTD
;code_project.c,30 :: 		}
L_end_move_forward:
0x004D	0x0008      	RETURN
; end of _move_forward
_turn_right:
;code_project.c,32 :: 		void turn_right() {
;code_project.c,33 :: 		PORTD = 0x09;  // Turn right command
0x004E	0x3009      	MOVLW      9
0x004F	0x1283      	BCF        STATUS, 5
0x0050	0x1303      	BCF        STATUS, 6
0x0051	0x0088      	MOVWF      PORTD
;code_project.c,34 :: 		}
L_end_turn_right:
0x0052	0x0008      	RETURN
; end of _turn_right
_transmitter:
;code_project.c,118 :: 		void transmitter(unsigned char tx) {
;code_project.c,120 :: 		TXREG= tx;
0x0053	0x1283      	BCF        STATUS, 5
0x0054	0x1303      	BCF        STATUS, 6
0x0055	0x0827      	MOVF       FARG_transmitter_tx, 0
0x0056	0x0099      	MOVWF      TXREG
;code_project.c,122 :: 		while (!TXIF);
L_transmitter23:
;code_project.c,124 :: 		PIR1= PIR1 & 0xEF; //TXIF_bit=0;
0x0057	0x30EF      	MOVLW      239
0x0058	0x058C      	ANDWF      PIR1, 1
;code_project.c,126 :: 		}
L_end_transmitter:
0x0059	0x0008      	RETURN
; end of _transmitter
_CCPPWM_init:
;code_project.c,92 :: 		void CCPPWM_init(void){ //Configure CCP1 and CCP2 at 2ms period with 50% duty cycle
;code_project.c,93 :: 		T2CON = 0x07;//enable Timer2 at Fosc/4 with 1:16 prescaler (8 uS percount 2000uS to count 250 counts)
0x005A	0x3007      	MOVLW      7
0x005B	0x1283      	BCF        STATUS, 5
0x005C	0x1303      	BCF        STATUS, 6
0x005D	0x0092      	MOVWF      T2CON
;code_project.c,94 :: 		CCP1CON = 0x0C;//enable PWM for CCP1
0x005E	0x300C      	MOVLW      12
0x005F	0x0097      	MOVWF      CCP1CON
;code_project.c,95 :: 		CCP2CON = 0x0C;//enable PWM for CCP2
0x0060	0x300C      	MOVLW      12
0x0061	0x009D      	MOVWF      CCP2CON
;code_project.c,96 :: 		PR2 = 250;// 250 counts =8uS *250 =2ms period
0x0062	0x30FA      	MOVLW      250
0x0063	0x1683      	BSF        STATUS, 5
0x0064	0x0092      	MOVWF      PR2
;code_project.c,97 :: 		TRISC = 0x00;
0x0065	0x0187      	CLRF       TRISC
;code_project.c,98 :: 		CCPR1L= pwmValue;  // Set initial PWM value for CCP1
0x0066	0x1283      	BCF        STATUS, 5
0x0067	0x0820      	MOVF       _pwmValue, 0
0x0068	0x0095      	MOVWF      CCPR1L
;code_project.c,99 :: 		CCPR2L = pwmValue;  // Set initial PWM value for CCP2
0x0069	0x0820      	MOVF       _pwmValue, 0
0x006A	0x009B      	MOVWF      CCPR2L
;code_project.c,100 :: 		}
L_end_CCPPWM_init:
0x006B	0x0008      	RETURN
; end of _CCPPWM_init
_follow_line:
;code_project.c,53 :: 		void follow_line() {
;code_project.c,54 :: 		unsigned int tapeCount = 0;
0x006C	0x1283      	BCF        STATUS, 5
0x006D	0x1303      	BCF        STATUS, 6
0x006E	0x01A5      	CLRF       follow_line_tapeCount_L0
0x006F	0x01A6      	CLRF       follow_line_tapeCount_L0+1
;code_project.c,57 :: 		serial_interface();
0x0070	0x200F      	CALL       _serial_interface
;code_project.c,58 :: 		result = reciever();
0x0071	0x2003      	CALL       _reciever
0x0072	0x0870      	MOVF       R0, 0
0x0073	0x00A2      	MOVWF      _result
;code_project.c,59 :: 		transmitter(result);
0x0074	0x0870      	MOVF       R0, 0
0x0075	0x00A7      	MOVWF      FARG_transmitter_tx
0x0076	0x2053      	CALL       _transmitter
;code_project.c,61 :: 		if (result == 's') {
0x0077	0x0822      	MOVF       _result, 0
0x0078	0x3A73      	XORLW      115
0x0079	0x1D03      	BTFSS      STATUS, 2
0x007A	0x287C      	GOTO       L_follow_line8
;code_project.c,62 :: 		stop();  // If 's' is received, stop the movement
0x007B	0x2045      	CALL       _stop
;code_project.c,63 :: 		}
L_follow_line8:
;code_project.c,65 :: 		if ((PORTB & 0x01) && (PORTB & 0x02)) {
0x007C	0x1C06      	BTFSS      PORTB, 0
0x007D	0x2885      	GOTO       L_follow_line11
0x007E	0x1C86      	BTFSS      PORTB, 1
0x007F	0x2885      	GOTO       L_follow_line11
L__follow_line26:
;code_project.c,66 :: 		tapeCount = tapeCount + 1;
0x0080	0x0AA5      	INCF       follow_line_tapeCount_L0, 1
0x0081	0x1903      	BTFSC      STATUS, 2
0x0082	0x0AA6      	INCF       follow_line_tapeCount_L0+1, 1
;code_project.c,67 :: 		move_forward();  // If both sensors detect the line, move forward
0x0083	0x2049      	CALL       _move_forward
;code_project.c,68 :: 		} else if (PORTB & 0x02) {
0x0084	0x289A      	GOTO       L_follow_line12
L_follow_line11:
0x0085	0x1C86      	BTFSS      PORTB, 1
0x0086	0x288E      	GOTO       L_follow_line13
;code_project.c,69 :: 		turn_left();  // If right sensor detects the line, turn left
0x0087	0x200A      	CALL       _turn_left
;code_project.c,70 :: 		my_delay(500);
0x0088	0x30F4      	MOVLW      244
0x0089	0x00A7      	MOVWF      FARG_my_delay_mscnt
0x008A	0x3001      	MOVLW      1
0x008B	0x00A8      	MOVWF      FARG_my_delay_mscnt+1
0x008C	0x2026      	CALL       _my_delay
;code_project.c,71 :: 		} else if (PORTB & 0x01) {
0x008D	0x289A      	GOTO       L_follow_line14
L_follow_line13:
0x008E	0x1C06      	BTFSS      PORTB, 0
0x008F	0x2897      	GOTO       L_follow_line15
;code_project.c,72 :: 		turn_right();  // If left sensor detects the line, turn right
0x0090	0x204E      	CALL       _turn_right
;code_project.c,73 :: 		my_delay(500);
0x0091	0x30F4      	MOVLW      244
0x0092	0x00A7      	MOVWF      FARG_my_delay_mscnt
0x0093	0x3001      	MOVLW      1
0x0094	0x00A8      	MOVWF      FARG_my_delay_mscnt+1
0x0095	0x2026      	CALL       _my_delay
;code_project.c,74 :: 		} else {
0x0096	0x289A      	GOTO       L_follow_line16
L_follow_line15:
;code_project.c,75 :: 		tapeCount = 0;
0x0097	0x01A5      	CLRF       follow_line_tapeCount_L0
0x0098	0x01A6      	CLRF       follow_line_tapeCount_L0+1
;code_project.c,76 :: 		move_forward();  // If no line is detected, move forward
0x0099	0x2049      	CALL       _move_forward
;code_project.c,77 :: 		}
L_follow_line16:
L_follow_line14:
L_follow_line12:
;code_project.c,80 :: 		if (tapeCount == 0) {
0x009A	0x3000      	MOVLW      0
0x009B	0x0626      	XORWF      follow_line_tapeCount_L0+1, 0
0x009C	0x1D03      	BTFSS      STATUS, 2
0x009D	0x28A0      	GOTO       L__follow_line36
0x009E	0x3000      	MOVLW      0
0x009F	0x0625      	XORWF      follow_line_tapeCount_L0, 0
L__follow_line36:
0x00A0	0x1D03      	BTFSS      STATUS, 2
0x00A1	0x28A7      	GOTO       L_follow_line17
;code_project.c,81 :: 		pwmValue = 75;  // Set PWM value to 75 if no tape is detected
0x00A2	0x304B      	MOVLW      75
0x00A3	0x00A0      	MOVWF      _pwmValue
0x00A4	0x3000      	MOVLW      0
0x00A5	0x00A1      	MOVWF      _pwmValue+1
;code_project.c,82 :: 		} else if (tapeCount == 1) {
0x00A6	0x28BD      	GOTO       L_follow_line18
L_follow_line17:
0x00A7	0x3000      	MOVLW      0
0x00A8	0x0626      	XORWF      follow_line_tapeCount_L0+1, 0
0x00A9	0x1D03      	BTFSS      STATUS, 2
0x00AA	0x28AD      	GOTO       L__follow_line37
0x00AB	0x3001      	MOVLW      1
0x00AC	0x0625      	XORWF      follow_line_tapeCount_L0, 0
L__follow_line37:
0x00AD	0x1D03      	BTFSS      STATUS, 2
0x00AE	0x28B4      	GOTO       L_follow_line19
;code_project.c,83 :: 		pwmValue = 50;  // Set PWM value to 50 if one tape is detected
0x00AF	0x3032      	MOVLW      50
0x00B0	0x00A0      	MOVWF      _pwmValue
0x00B1	0x3000      	MOVLW      0
0x00B2	0x00A1      	MOVWF      _pwmValue+1
;code_project.c,84 :: 		} else if (tapeCount == 2) {
0x00B3	0x28BD      	GOTO       L_follow_line20
L_follow_line19:
0x00B4	0x3000      	MOVLW      0
0x00B5	0x0626      	XORWF      follow_line_tapeCount_L0+1, 0
0x00B6	0x1D03      	BTFSS      STATUS, 2
0x00B7	0x28BA      	GOTO       L__follow_line38
0x00B8	0x3002      	MOVLW      2
0x00B9	0x0625      	XORWF      follow_line_tapeCount_L0, 0
L__follow_line38:
0x00BA	0x1D03      	BTFSS      STATUS, 2
0x00BB	0x28BD      	GOTO       L_follow_line21
;code_project.c,85 :: 		stop();  // If two tapes are detected, stop the movement
0x00BC	0x2045      	CALL       _stop
;code_project.c,86 :: 		}
L_follow_line21:
L_follow_line20:
L_follow_line18:
;code_project.c,88 :: 		CCPR1L = pwmValue;
0x00BD	0x0820      	MOVF       _pwmValue, 0
0x00BE	0x0095      	MOVWF      CCPR1L
;code_project.c,89 :: 		CCPR2L = pwmValue;
0x00BF	0x0820      	MOVF       _pwmValue, 0
0x00C0	0x009B      	MOVWF      CCPR2L
;code_project.c,90 :: 		}
L_end_follow_line:
0x00C1	0x0008      	RETURN
; end of _follow_line
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x00C2	0x201F      	CALL       _____DoICP
0x00C3	0x118A      	BCF        PCLATH, 3
0x00C4	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x00C5	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x00C6	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x00C7	0x0AA3      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x00C8	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x00C9	0x0AA4      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x00CA	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x00CB	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x00CC	0x28C2      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x00CD	0x0008      	RETURN
; end of ___CC2DW
_main:
0x00CE	0x3064      	MOVLW      100
0x00CF	0x1283      	BCF        STATUS, 5
0x00D0	0x1303      	BCF        STATUS, 6
0x00D1	0x00A0      	MOVWF      _pwmValue
0x00D2	0x01A1      	CLRF       33
;code_project.c,16 :: 		void main() {
;code_project.c,17 :: 		TRISD = 0x00;  // PORTD as output
0x00D3	0x1683      	BSF        STATUS, 5
0x00D4	0x0188      	CLRF       TRISD
;code_project.c,18 :: 		PORTD = 0x00;  // Initialize PORTD to 0
0x00D5	0x1283      	BCF        STATUS, 5
0x00D6	0x0188      	CLRF       PORTD
;code_project.c,19 :: 		TRISC = 0xF0;
0x00D7	0x30F0      	MOVLW      240
0x00D8	0x1683      	BSF        STATUS, 5
0x00D9	0x0087      	MOVWF      TRISC
;code_project.c,20 :: 		TRISB = 0x03;  // PORTB<1:0> as input
0x00DA	0x3003      	MOVLW      3
0x00DB	0x0086      	MOVWF      TRISB
;code_project.c,21 :: 		CCPPWM_init();
0x00DC	0x205A      	CALL       _CCPPWM_init
;code_project.c,23 :: 		while (1) {
L_main0:
;code_project.c,24 :: 		follow_line();  // Start following the line
0x00DD	0x206C      	CALL       _follow_line
;code_project.c,25 :: 		}
0x00DE	0x28DD      	GOTO       L_main0
;code_project.c,26 :: 		}
L_end_main:
0x00DF	0x28DF      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [7]    _reciever
0x000A       [5]    _turn_left
0x000F      [16]    _serial_interface
0x001F       [7]    _____DoICP
0x0026      [31]    _my_delay
0x0045       [4]    _stop
0x0049       [5]    _move_forward
0x004E       [5]    _turn_right
0x0053       [7]    _transmitter
0x005A      [18]    _CCPPWM_init
0x006C      [86]    _follow_line
0x00C2      [12]    ___CC2DW
0x00CE      [18]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000C       [1]    PIR1
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001B       [1]    CCPR2L
0x001D       [1]    CCP2CON
0x0020       [2]    _pwmValue
0x0022       [1]    _result
0x0023       [2]    ___DoICPAddr
0x0025       [2]    follow_line_tapeCount_L0
0x0027       [1]    FARG_transmitter_tx
0x0027       [2]    FARG_my_delay_mscnt
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x0092       [1]    PR2
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
